package cmd

import (
	"fmt"
	"os"

	"github.com/IBM/kubectl-odlm/internal/action"
	"github.com/fatih/color"
	"github.com/gosuri/uitable"
	"github.com/spf13/cobra"

	odlmv1alpha1 "github.com/IBM/operand-deployment-lifecycle-manager/api/v1alpha1"
)

func newODLMTreeCmd(cfg *action.Configuration) *cobra.Command {
	cmd := &cobra.Command{
		Use:          "tree <OperandRequest NAME>",
		SilenceUsage: true, // for when RunE returns an error
		Short:        "Show operator and operand generated by OperandRequest",
		Args:         cobra.MaximumNArgs(1),
		Run: func(command *cobra.Command, args []string) {
			if len(args) == 1 {
				opreqName := args[0]
				tree := action.NewTree(cfg)
				tree.Table = uitable.New()
				tree.Table.Separator = "  "
				tree.Table.AddRow("NAMESPACE", "NAME")
				tree.Ctx = command.Context()
				tree.TreeView(opreqName)
				fmt.Fprintln(color.Output, tree.Table)
			} else {
				opreqList := &odlmv1alpha1.OperandRequestList{}
				tree := action.NewTree(cfg)
				tree.Ctx = command.Context()
				if err := tree.Config.Client.List(tree.Ctx, opreqList); err != nil {
					fmt.Println("Error: ", err)
					os.Exit(1)
				}
				tree.Table = uitable.New()
				tree.Table.Separator = "  "
				tree.Table.AddRow("NAMESPACE", "NAME")
				// tree.TreeViewList(opreqList.Items)
				for _, opreq := range opreqList.Items {
					tree.TreeView(opreq.Name)
				}
				fmt.Fprintln(color.Output, tree.Table)
			}

		},
	}
	return cmd
}
