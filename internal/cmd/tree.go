package cmd

import (
	"fmt"

	"github.com/IBM/kubectl-odlm/internal/action"
	"github.com/spf13/cobra"
	"k8s.io/apimachinery/pkg/types"

	odlmv1alpha1 "github.com/IBM/operand-deployment-lifecycle-manager/api/v1alpha1"
)

func newODLMTreeCmd(cfg *action.Configuration) *cobra.Command {
	tree := action.NewOperandRequestTree(cfg)
	cmd := &cobra.Command{
		Use:          "tree <OperandRequest NAME>",
		SilenceUsage: true, // for when RunE returns an error
		Short:        "Show operator and operand generated by OperandRequest",
		Args:         cobra.ExactArgs(1),
		Run: func(command *cobra.Command, args []string) {
			opreqName := args[0]
			tree.Ctx = command.Context()
			key := types.NamespacedName{
				Namespace: tree.Config.Namespace,
				Name:      opreqName,
			}
			tree.OperandRequestInstance = key
			opreq := &odlmv1alpha1.OperandRequest{}
			if err := tree.Config.Client.Get(tree.Ctx, key, opreq); err != nil {
				fmt.Println("Error: ", err)
			}
			tree.RegistryMap = make(map[types.NamespacedName][]string)
			for _, req := range opreq.Spec.Requests {
				var operatorList []string
				for _, opt := range req.Operands {
					operatorList = append(operatorList, opt.Name)
				}
				var registryNamespace string
				if req.RegistryNamespace == "" {
					registryNamespace = tree.Config.Namespace
				} else {
					registryNamespace = req.RegistryNamespace
				}
				key = types.NamespacedName{Namespace: registryNamespace, Name: req.Registry}
				tree.RegistryMap[key] = operatorList
			}
			for opreg, opNameList := range tree.RegistryMap {
				opregInstance := &odlmv1alpha1.OperandRegistry{}
				if err := tree.Config.Client.Get(tree.Ctx, opreg, opregInstance); err != nil {
					fmt.Println("Error: ", err)
					continue
				}
				for _, opName := range opNameList {
					find, opt := checkoptFromRegistry(opName, opregInstance)
					if !find {
						continue
					}
					tree.SubscriptionList = append(tree.SubscriptionList, opt)
				}
			}
			tree.TreeView()
		},
	}
	return cmd
}

func checkoptFromRegistry(name string, opreg *odlmv1alpha1.OperandRegistry) (find bool, opt types.NamespacedName) {
	for _, opt := range opreg.Spec.Operators {
		if opt.Name == name {
			var ns string
			if opt.Scope == "cluster" {
				ns = "openshift-operators"
			} else {
				ns = opt.Namespace
			}
			return true, types.NamespacedName{Namespace: ns, Name: name}
		}
	}
	return
}
